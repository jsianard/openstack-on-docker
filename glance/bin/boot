#!/bin/bash
#
# This script is designed to be run inside the container
#

# fail hard and fast even on pipelines
set -eo pipefail

# set debug based on envvar
[[ $DEBUG ]] && set -x

# configure etcd
export ETCD_PORT=${ETCD_PORT:-4001}
export ETCD="$HOST:$ETCD_PORT"
export ETCD_PATH=${ETCD_PATH:-/openstack/glance}
export ETCD_TTL=${ETCD_TTL:-10}

# initialize data volume

# wait for etcd to be available
until etcdctl --no-sync -C $ETCD ls >/dev/null 2>&1; do
  echo "waiting for etcd at $ETCD..."
  sleep $(($ETCD_TTL/2))  # sleep for half the TTL
done

# wait until etcd has discarded potentially stale values
sleep $(($ETCD_TTL+1))

function etcd_set_default {
  etcdctl --no-sync -C $ETCD mk $ETCD_PATH/$1 $2 >/dev/null 2>&1 || true
}

MYSQL_USER=${MYSQL_USER:-glance}
MYSQL_PASS=${MYSQL_PASS:-glance}

etcd_set_default databaseUser ${MYSQL_USER}
etcd_set_default databasePass ${MYSQL_PASS}

until etcdctl -C $ETCD get /openstack/database/host; do
  echo "Wating for Database host to register with etcd"
  sleep 5
done

# wait for confd to run once and install initial templates
until confd -onetime -node $ETCD -config-file /app/confd.toml; do
  echo "database: waiting for confd to write initial templates..."
  sleep $(($ETCD_TTL/2))  # sleep for half the TTL
done

# create the database for glance
/app/bin/database

# run the service in the background
glance-registry -v &
SERVICE_PID=$!
echo ${SERVICE_PID} > /app/glance-registry.pid

# run the service in the background
glance-api -v &

SERVICE_PID=$!

echo ${SERVICE_PID} > /app/glance-api.pid

# smart shutdown on SIGINT and SIGTERM
function on_exit() {
    kill -TERM $SERVICE_PID
    wait $SERVICE_PID 2>/dev/null
    exit 0
}
trap on_exit INT TERM

# spawn confd in the background to update services based on etcd changes
confd -node $ETCD -config-file /app/confd.toml &
CONFD_PID=$!

# wait for the service to become available
sleep 1 && while [[ -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".9292\" && \$1 ~ \"tcp.?\"") ]] ; do sleep 1; done

echo openstack-glance-api running...

# migrate database and create service endpoint.
/app/bin/configure

# publish the service to etcd using the injected HOST and PORT
if [[ ! -z $PUBLISH ]]; then

  # configure service discovery
  PORT=${PORT:-9292}
  PROTO=${PROTO:-tcp}

  set +e

  # wait for the service to become available on PUBLISH port
  sleep 1 && while [[ -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".$PUBLISH\" && \$1 ~ \"$PROTO.?\"") ]] ; do sleep 1; done

  # while the port is listening, publish to etcd
  while [[ ! -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".$PUBLISH\" && \$1 ~ \"$PROTO.?\"") ]] ; do
    etcdctl --no-sync -C $ETCD set $ETCD_PATH/host $HOST --ttl $ETCD_TTL >/dev/null
    etcdctl --no-sync -C $ETCD set $ETCD_PATH/port $PORT --ttl $ETCD_TTL >/dev/null
    sleep $(($ETCD_TTL/2)) # sleep for half the TTL
  done

  # if the loop quits, something went wrong
  exit 1
fi

wait
