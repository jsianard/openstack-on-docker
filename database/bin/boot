#!/bin/bash
#
# This script is designed to be run inside the container
#

# fail hard and fast even on pipelines
set -eo pipefail

# set debug based on envvar
[[ $DEBUG ]] && set -x

# configure etcd
export ETCD_PORT=${ETCD_PORT:-4001}
export ETCD="$HOST:$ETCD_PORT"
export ETCD_PATH=${ETCD_PATH:-/openstack/database}
export ETCD_TTL=${ETCD_TTL:-10}

# initialize data volume
chown -R mysql:mysql /var/lib/mysql
if [[ ! -d $VOLUME_HOME/mysql ]]; then
  echo "=> An empty or uninitialized MariaDB volume is detected in $VOLUME_HOME"
  echo "=> Installing MariaDB ..."
  mysql_install_db > /dev/null 2>&1
  echo "=> Done!"
else
  echo "=> Using an existing volume of MariaDB"
fi

# wait for etcd to be available
until etcdctl --no-sync -C $ETCD ls >/dev/null 2>&1; do
  echo "waiting for etcd at $ETCD..."
  sleep $(($ETCD_TTL/2))  # sleep for half the TTL
done

# wait until etcd has discarded potentially stale values
sleep $(($ETCD_TTL+1))

function etcd_set_default {
  etcdctl --no-sync -C $ETCD mk $ETCD_PATH/$1 $2 >/dev/null 2>&1 || true
}

MYSQL_USER=${MYSQL_USER:-openstack}
MYSQL_PASS=${MYSQL_PASS:-openstack}
REP_USER=${REP_USER:-replicator}
REP_PASS=${REP_PASS:-replicator}

PORT=${PORT:-3306}
PROTO=${PROTO:-tcp}

etcd_set_default engine mysql
etcd_set_default adminUser ${MYSQL_USER}
etcd_set_default adminPass ${MYSQL_PASS}
if [[ ! -z $CLUSTER ]]; then
  etcd_set_default cluster ${CLUSTER}
  etcd_set_default repUser ${REP_USER}
  etcd_set_default repPass ${REP_PASS}
fi


# wait for confd to run once and install initial templates
until confd -onetime -node $ETCD -config-file /app/confd.toml; do
  echo "database: waiting for confd to write initial templates..."
  sleep $(($ETCD_TTL/2))  # sleep for half the TTL
done

# run the service in the background
#service mysql start
if [[ -z $CLUSTER ]]; then
  mysqld_safe &
else
  if [[ $MEMBER == 1 ]]; then
    mysqld_safe --wsrep-new-cluster &
  else
    PRIMARY_HOST=`etcdctl -C $ETCD get /openstack/database/host`
    PRIMARY_PORT=`etcdctl -C $ETCD get /openstack/database/port`

    mysqld_safe --wsrep_cluster_address=gcomm://$HOST:$PORT &
  fi
fi

SERVICE_PID=$!

echo $SERVICE_PID > /app/database.pid

# smart shutdown on SIGINT and SIGTERM
function on_exit() {
    kill -TERM $SERVICE_PID
    wait $SERVICE_PID 2>/dev/null
    exit 0
}
trap on_exit INT TERM

# spawn confd in the background to update services based on etcd changes
confd -node $ETCD -config-file /app/confd.toml &
CONFD_PID=$!

# wait for the service to become available
sleep 1 && while [[ -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".3306\" && \$1 ~ \"tcp.?\"") ]] ; do sleep 1; done

# perform a one-time reload to populate database entries
/usr/local/bin/reload

echo openstack-database running...

# publish the service to etcd using the injected HOST and PORT
if [[ ! -z $PUBLISH ]]; then

  set +e

  # wait for the service to become available on PUBLISH port
  sleep 1 && while [[ -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".$PUBLISH\" && \$1 ~ \"$PROTO.?\"") ]] ; do sleep 1; done

  # while the port is listening, publish to etcd
  while [[ ! -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".$PUBLISH\" && \$1 ~ \"$PROTO.?\"") ]] ; do
    etcdctl --no-sync -C $ETCD set $ETCD_PATH/host $HOST --ttl $ETCD_TTL >/dev/null
    etcdctl --no-sync -C $ETCD set $ETCD_PATH/port $PORT --ttl $ETCD_TTL >/dev/null
    sleep $(($ETCD_TTL/2)) # sleep for half the TTL
  done

  # if the loop quits, something went wrong
  exit 1

fi

wait
