#!/bin/bash
#
# This script is designed to be run inside the container
#

# fail hard and fast even on pipelines
set -eo pipefail

# set debug based on envvar
[[ $DEBUG ]] && set -x

# configure etcd
export ETCD_PORT=${ETCD_PORT:-4001}
export ETCD="$HOST:$ETCD_PORT"
export ETCD_PATH=${ETCD_PATH:-/openstack/messaging}
export ETCD_TTL=${ETCD_TTL:-10}

# wait for etcd to be available
until etcdctl --no-sync -C $ETCD ls >/dev/null 2>&1; do
  echo "waiting for etcd at $ETCD..."
  sleep $(($ETCD_TTL/2))  # sleep for half the TTL
done

# wait until etcd has discarded potentially stale values
sleep $(($ETCD_TTL+1))

function etcd_set_default {
  etcdctl --no-sync -C $ETCD mk $ETCD_PATH/$1 $2 >/dev/null 2>&1 || true
}

function etcd_make_directory {
  etcdctl --no-sync -C $ETCD mkdir $ETCD_PATH/$1 >/dev/null 2>&1 || true
}

RABBIT_ADMIN_USER=${RABBIT_ADMIN_USER:-admin}
RABBIT_ADMIN_PASS=${RABBIT_ADMIN_PASS:-admin}
RABBIT_USER=${RABBIT_USER:-openstack}
RABBIT_PASS=${RABBIT_PASS:-openstack}
VHOST=${VHOST:-openstack}
PORT=${PUBLISH:-5672}
PROTO=${PROTO:-tcp}
ERLANG_COOKIE=${ERLANG_COOKIE:-BYURYPHAITSYVAWEFSYP}
CLUSTER=${CLUSTER:-openstack}

etcd_set_default engine rabbitmq
etcd_set_default credentials/adminUser ${RABBIT_ADMIN_USER}
etcd_set_default credentials/adminPass ${RABBIT_ADMIN_PASS}
etcd_set_default credentials/openstackUser ${RABBIT_USER}
etcd_set_default credentials/openstackPass ${RABBIT_PASS}
etcd_set_default vhosts/$VHOST $VHOST
etcd_set_default cookie ${ERLANG_COOKIE}
etcd_set_default host $HOST
etcd_set_default port $PORT
etcdctl --no-sync -C $ETCD mkdir /openstack/hosts > /dev/null 2>&1 || true
etcd_set_default cluster/name ${CLUSTER}
etcd_make_directory cluster/nodes

# wait for confd to run once and install initial templates
until confd -onetime -node $ETCD -config-file /app/confd.toml; do
  echo "database: waiting for confd to write initial templates..."
  sleep $(($ETCD_TTL/2))  # sleep for half the TTL
done

CLUSTER_NODE=$(etcdctl --no-sync -C $ETCD ls $ETCD_PATH/cluster/nodes | awk -F/ '{print $6}' | head -1)


echo Starting RabbitMQ

rabbitmq-server &

echo $SERVICE_PID > /app/messaging.pid

# smart shutdown on SIGINT and SIGTERM
function on_exit() {
    kill -TERM $SERVICE_PID
    wait $SERVICE_PID 2>/dev/null
    exit 0
}
trap on_exit INT TERM

# spawn confd in the background to update services based on etcd changes
confd -node $ETCD -config-file /app/confd.toml &
CONFD_PID=$!

# wait for the service to become available
echo sleeping for 5 seconds, then testing if MQ is up.
sleep 5
while [[ -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".$PUBLISH\" && \$1 ~ \"$PROTO.?\"") ]] ; do sleep 1; done

if [[ -n $CLUSTER_NODE ]]; then
  echo Clustering Rabbit
  rabbitmqctl stop_app
  rabbitmqctl join_cluster --ram rabbit@${CLUSTER_NODE}
  rabbitmqctl start_app
fi

/app/bin/messaging_creds

echo openstack-messaging running...

# publish the service to etcd using the injected HOST and PORT
if [[ ! -z $PUBLISH ]]; then

  set +e

  # wait for the service to become available on PUBLISH port
  sleep 1 && while [[ -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".$PUBLISH\" && \$1 ~ \"$PROTO.?\"") ]] ; do sleep 1; done

  # while the port is listening, be happy
  while [[ ! -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".$PUBLISH\" && \$1 ~ \"$PROTO.?\"") ]] ; do
    sleep $(($ETCD_TTL/2)) # sleep for half the TTL
  done

  # if the loop quits, something went wrong
  exit 1

fi

wait
